<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2016 IBM and others
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <parent>
        <artifactId>microprofile-conference</artifactId>
        <groupId>io.microprofile.showcase</groupId>
        <version>1.0.0-SNAPSHOT</version>
    </parent>

    <artifactId>microservice-vote</artifactId>
    <packaging>war</packaging>

    <name>Conference :: Vote</name>

    <properties>
        <!-- Liberty server properties -->
        <wlpServerName>VoteServer</wlpServerName>
        <warName>vote-service-application</warName>
        <warVersion>1.0.0-SNAPSHOT</warVersion>
        <!--This is set in the ibm-web-ext.xml file -->
        <warContext>vote</warContext>
        <package.file>${project.build.directory}/${project.artifactId}${qualifier.jar}.jar</package.file>
        <packaging.type>runnable</packaging.type>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <testServerHttpPort>7070</testServerHttpPort>
        <testServerHttpsPort>9443</testServerHttpsPort>
        <service.name>${project.artifactId}</service.name>
        <service.name>${project.artifactId}</service.name>
        <service.port>9191</service.port>
        <docker.user>example</docker.user>
        <icon>http://microprofile.io/app/images/logo.png</icon>
    </properties>

    <repositories>
        <repository>
            <id>liberty-starter-maven-repo</id>
            <name>liberty-starter-maven-repo</name>
            <url>http://liberty-app-accelerator.wasdev.developer.ibm.com/start/api/v1/repo</url>
        </repository>
    </repositories>


    <profiles>
        <profile>
            <id>createZip</id>
            <!-- Create a zip file containing app and server rather than a runnable jar -->
            <properties>
                <package.file>${project.build.directory}/${project.artifactId}.zip</package.file>
                <packaging.type>usr</packaging.type>
            </properties>
        </profile>
        <profile>
            <id>liberty-test</id>

            <!--Do not start the server unless testing-->

            <activation>
                <property>
                    <name>!skipTests</name>
                </property>
            </activation>

            <build>
                <plugins>
                    <plugin>
                        <groupId>net.wasdev.wlp.maven.plugins</groupId>
                        <artifactId>liberty-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>start-server</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>start-server</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>stop-server</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>stop-server</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>fabric8</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>

            <build>
                <plugins>
                    <plugin>
                        <!--This plugin requires that you Docker environment variables are defined correctly, check them with:-->
                        <!--docker-machine env-->
                        <groupId>io.fabric8</groupId>
                        <artifactId>fabric8-maven-plugin</artifactId>
                        <configuration>
                            <mode>kubernetes</mode>
                            <images>
                                <image>
                                    <name>${docker.user}/${project.artifactId}:${project.version}</name>
                                    <build>
                                        <from>TODO DOCKER IMAGE</from>
                                        <assembly>
                                            <basedir>${project.build.directory}/deployment</basedir>
                                            <descriptorRef>artifact</descriptorRef>
                                        </assembly>
                                    </build>
                                    <watch>
                                        <interval>5000</interval>
                                    </watch>
                                </image>
                            </images>
                        </configuration>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>resource</goal>
                                    <goal>build</goal>
                                    <!--<goal>deploy</goal>-->
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <dependencies>
        <dependency>
            <groupId>net.wasdev.wlp.starters.microprofile</groupId>
            <artifactId>provided-pom</artifactId>
            <version>0.0.3</version>
            <type>pom</type>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>net.wasdev.wlp.starters.microprofile</groupId>
            <artifactId>runtime-pom</artifactId>
            <version>0.0.3</version>
            <type>pom</type>
            <scope>runtime</scope>
        </dependency>
        <dependency>
           <groupId>javax.annotation</groupId>
           <artifactId>javax.annotation-api</artifactId>
           <version>1.2</version>
           <scope>provided</scope>
        </dependency>
        <dependency>
           <groupId>org.glassfish.jersey.core</groupId>
           <artifactId>jersey-common</artifactId>
           <version>2.23.2</version>
           <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-rs-client</artifactId>
            <version>3.1.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.glassfish</groupId>
            <artifactId>javax.json</artifactId>
            <version>1.0.4</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.microprofile.showcase</groupId>
            <artifactId>demo-bootstrap</artifactId>
            <version>${project.version}</version>
        </dependency>
    </dependencies>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>net.wasdev.wlp.maven.plugins</groupId>
                    <artifactId>liberty-maven-plugin</artifactId>
                    <extensions>true</extensions>
                    <configuration>
                        <serverName>${wlpServerName}</serverName>
                        <assemblyInstallDirectory>${project.build.directory}</assemblyInstallDirectory>
                        <configFile>src/main/liberty/config/server.xml</configFile>
                        <packageFile>${package.file}</packageFile>
                        <include>${packaging.type}</include>
                        <bootstrapProperties>
                            <default.http.port>${testServerHttpPort}</default.http.port>
                            <default.https.port>${testServerHttpsPort}</default.https.port>
                        </bootstrapProperties>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <configuration>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                    <packagingExcludes>pom.xml</packagingExcludes>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>test</phase>
                        <id>default-test</id>
                        <configuration>
                            <excludes>
                                <exclude>**/it/**</exclude>
                            </excludes>
                            <reportsDirectory>${project.build.directory}/test-reports/unit</reportsDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- Plugin to run functional tests -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>integration-test</phase>
                        <id>integration-test</id>
                        <goals>
                            <goal>integration-test</goal>
                        </goals>
                        <configuration>
                            <includes>
                                <include>**/it/**</include>
                            </includes>
                            <systemPropertyVariables>
                                <liberty.test.port>${testServerHttpPort}</liberty.test.port>
                                <app.context.root>${warContext}</app.context.root>
                            </systemPropertyVariables>
                        </configuration>
                    </execution>
                    <execution>
                        <id>verify-results</id>
                        <goals>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <summaryFile>${project.build.directory}/test-reports/it/failsafe-summary.xml</summaryFile>
                    <reportsDirectory>${project.build.directory}/test-reports/it</reportsDirectory>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-server-files</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <includeArtifactIds>server-snippet</includeArtifactIds>
                    <prependGroupId>true</prependGroupId>
                    <outputDirectory>
                        ${project.build.directory}/wlp/usr/servers/${wlpServerName}/configDropins/defaults
                    </outputDirectory>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-app</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                          <outputDirectory>${project.build.directory}/wlp/usr/servers/${wlpServerName}/dropins</outputDirectory>
                          <resources>
                            <resource>
                              <directory>${project.build.directory}</directory>
                              <includes>
                                <include>${warfile.name}.war</include>
                              </includes>
                            </resource>
                          </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- Enable liberty-maven plugin -->
            <plugin>
                <groupId>net.wasdev.wlp.maven.plugins</groupId>
                <artifactId>liberty-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>install-liberty</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>install-server</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>package-app</id>
                        <phase>package</phase>
                        <goals>
                            <goal>package-server</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
